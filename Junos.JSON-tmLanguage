{ "name": "Junos",
  "scopeName": "text.junos",
  "fileTypes": ["conf", "conf.1", "conf.2", "conf.3", "conf.4",
      "conf.5", "conf.6", "conf.7", "conf.8", "conf.9",
      "conf.10", "conf.11", "conf.12", "conf.13", "conf.14",
      "conf.15", "conf.16", "conf.17", "conf.18", "conf.19",
      "conf.20", "conf.21", "conf.22", "conf.23", "conf.24",
      "conf.25", "conf.26", "conf.27", "conf.28", "conf.29",
      "conf.30", "conf.31", "conf.32", "conf.33", "conf.34",
      "conf.35", "conf.36", "conf.37", "conf.38", "conf.39",
      "conf.40", "conf.41", "conf.42", "conf.43", "conf.44",
      "conf.45", "conf.46", "conf.47", "conf.48", "conf.49"
    ],
  "patterns": [
    {
      "comment": "Block Comment or annotation",
      "name": "comment.block.junos",
      "begin": "/\\*", 
      "end": "(\\*/|\n)", 
      "captures": {
        "0": { "name": "comment.block.junos" }
      }
    },
    {
      "comment": "Line comment (anything following a hashtag (#)",
      "name": "comment.line.number-sign.junos",
      "match": "(^|^\\s|\\s)(#).*$\n?", 
      "captures": {
        "2": { "name": "punctuation.definition.comment.junos" }
      }
    },
    {
      "comment": "Major sections of the configuration",
      "match": "(?:^(\\s)*)(set |request |delete |edit |show |protect |protect: |inactive: |unprotect |deactivate |activate )?(system|forwarding-options|routing-options|interfaces|snmp|poe|ethernet-switching-options|security)(?=[ \n])",
      "captures": {
        "2": { "name": "keyword.control.junos" },
        "3": { "name": "entity.name.function.junos" }
      }
    },
    {
      "comment": "minor sections of the config.",
      "match": "(?:^(\\s)*)(set |request |delete |edit |show |protect |protect: |inactive: |unprotect |deactivate |activate )?(policy-options|protocols|chassis|firewall|applications|multi-chassis|redundant-power-system|version|services|virtual-chassis|event-options|class-of-service|access|accounting-options|diameter|fabric|multicast-snooping-options|switch-options|wlan|smtp|schedulers)(?=[ \n])",
      "captures": {
        "2": { "name": "keyword.control.junos" },
        "3": { "name": "entity.name.function.junos" }
      }
    },
    {
      "comment": "sections of the config that have a user-defined sub-item. For Example 'set routing-instances my_router ...' highlights 'set' as a control word, 'routing-instances' as an function entity, and 'my_router' as a variable.",
      "match": "(?:^(?:\\s)*)(set |request |delete |edit |show |protect |protect: |inactive: |unprotect |deactivate |activate )?(apply-groups|groups|access-profile|vlans|bridge-domains|routing-instances|dynamic-profiles|jsrc-partition|logical-systems)(?:[ ](?:\\s*{\\s*)?)(([-\\w_<>:\\./])+)(?:[;]|$|\\b)",
      "captures": {
        "1": { "name": "keyword.control.junos" },
        "2": { "name": "entity.name.function.junos" },
        "3": { "name": "variable.language.junos" }
      }
    },
    {
      "comment": "sections that have a user-defined sub-item, but modified to capture in stanza mode. Had to be its own capture, since it covers multiple lines.",
      "name": "",
      "begin": "(?:^\\s*)(protect: |inactive:)?(apply-groups|groups|access-profile|vlans|bridge-domains|routing-instances|dynamic-profiles|jsrc-partition|logical-systems)(?:\\s*{\\s*)?",
      "beginCaptures": {
        "1": { "name": "keyword.control.junos" },
        "2": { "name": "entity.name.function.junos" }
      }, 
      "end": "\\s{", 
      "patterns": [
        { "name": "variable.language.junos",
          "match": "\\s*(([-\\w_<>:\\./])+)"
        }
      ]
    }, 
    {
      "comment": "keywords captured without a major/minor section attached",
      "name": "keyword.control.junos",
      "match": "(protect: |inactive: )"
    },
    {
      "comment": "Interface names",
      "name": "support.class.junos",
      "match": "\\b((((ge-|et-|so-|fe-|gr-|xe-|lt-|vt-|si-|sp-)(\\d+\/\\d+\/\\d+))|(st|lo|me|vme|ae)\\d{1,3}|irb|vlan)(\\.\\d{1,5})?)\\b(?![-_<>])"
      // "match": "\\b(((((ge-|et-|so-|fe-|gr-|xe-|lt-|vt-|si-|sp-)(\\d+\/\\d+\/\\d+))|st\\d+|lo\\d+|me\\d+|vme\\d+|ae\\d+|irb)(\\.\\d+)?)|((vlan\\.\\d+)))\\b"
    },
    {
      "comment": "IPv4 addresses, with or without a mask",
      "name": "constant.numeric.integer.long.octal.junos",
      "match": "\\b((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))([/]\\d{1,2})?\\b"
    },
    {
      "comment": "IPv6 Addresses. This will not fully validate the structure of the IP, so some invalid IPv6 addresses might be false positives. IPv6 addresses themselves should be validated by running commands against a device.",
      "name": "constant.numeric.integer.long.octal.junos",
      "match": "(?:\\s|^)((?=.*::)(?!.*::.+::)(::)?([\\dA-Fa-f]{1,4}:(:|\\b)|){5}|([\\dA-Fa-f]{1,4}:){6})((([\\dA-Fa-f]{1,4}(::|:\\b|[/]\\d+|))|(?!\\3\\4)){2}|(((2[0-4]|1\\d|[1-9])?\\d|25[0-5])\\.?){4})([/]\\d{1,3})?(?:\\s|;)"
    },
    {
      "comment": "MAC Addresses identified as a number",
      "name": "constant.numeric.integer.long.octal.junos",
      "match": "(?:(\\b))([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})([/]\\d{1,2})?\\b"
    },
    {
      "comment": "Unit numbers, port numbers, etc",
      "match": "(?:\\s(?:unit|destination-port|source-port)[ ])((\\d{1,5})(-\\d{1,5})?)([;]|$|\\b)",
      "captures": {
        "1": { "name": "constant.numeric.integer.long.octal.junos" }
      }
    },
    {
      "comment": "URL Addresses, either matching character URL patterns, or http(s):// followed by an IPv4 address. ",
      "name": "keyword.operator.junos",
      "match": "\\b((https?:\/\/)|(scp:\/\/)|((s?|t?)ftp:\/\/))((([\\da-zA-Z\\.-]+)\\.([A-Za-z\\.]{2,6}))|(\\b((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))\\b))(([\/\\w\\.&?=+-]*)*)\/?"
    },
    {
      "comment": "Routing table names",
      "name": "keyword.operator.junos",
      "match": "(?:\\s)([\\w\\d_-]+\\.)?(inet6?|mpls|inetflow|iso|bgp\\.l(2|3)vpn)\\.\\d(?:\\b)"
    },
    {
      "comment": "User defined arbitrary names (such as filters, policy names, prefix-lists, etc)",
      "match": "(?:\\s(?:logical-systems|source-prefix-list|group|mime-pattern|url-pattern|label-switched-path|admin-groups|custom-url-category|profile|url-whitelist|url-blacklist|ca-profile|idp-policy|active-policy|interface-set|count|destination-prefix-list|import|export|instance|utm-policy|ids-option|next-hop-group|routing-instances|rule|rule-set|pool|class|unit|port-mirror-instance|from-zone|to-zone|apply-groups|file|host-name|domain-name|domain-search|community delete|community add|community set|community|trap-group|policy|policy-statement|import-policy|instance-export|instance-import|vrf-import|vrf-export|import|export|keep-import|inter-area-prefix-import|inter-area-prefix-export|network-summary-export|network-summary-import|bootstrap-import|bootstrap-export|filter|prefix-list|proposal|address-set|scheduler|rib-groups|security-zone|term|application|application-set|vlans|gateway|user|policer)[ ])(([-\\w_<>:\\./])+)([;]|$|\\b)",
      "captures": {
        "1": { "name": "variable.language.junos" }
      }
    },
    {
      "comment": "Double quoted strings",
      "name": "string.quoted.double.junos",
      "begin": "\"", 
      "beginCaptures": {
        "0": { "name": "punctuation.definition.string.begin.junos" }
      }, 
      "end": "\"", 
      "endCaptures": {
        "0": { "name": "punctuation.definition.string.end.junos" }
      },
      "patterns": [
        { "name": "constant.character.escape.junos",
          "match": "\\\\."
        }
      ]
    }, 
    { 
      "comment": "Single quoted strings",
      "name": "string.quoted.single.junos",
      "begin": "'",
      "beginCaptures": {
        "0": { "name": "punctuation.definition.string.begin.junos" }
      },
      "end": "'",
      "endCaptures": {
        "0": { "name": "punctuation.definition.string.end.junos" }
      },
      "patterns": [
        { "name": "constant.character.escape.junos",
          "match": "\\\\."
        }
      ]
    },
    { 
      "comment": "Descriptions should always look like strings, even if no quotations are needed",
      "match": "(?:\\s(?:description)[ ])((\\w|[-_<>:\\./])+)([;]|$|\\b)",
      "captures": {
        "1": { "name": "string.quoted.double.junos" }
      }
    }
  ],
  "uuid": "a24afbf3-0a1e-4795-87c3-7bb7e582bffe"
}